module dlirium.textfilter.syntax_d;

import std.regex;

string getKeywordForToken_D(string token)
{
	if(token.match("[0-9]+(L|u|U|Lu|LU|uL|UL)*"))
		return "dNumber";

	switch(token)
	{
		case "import":
		case "export":
			return "dExternal";
		case "if":
		case "else":
		case "switch":
			return "dConditional";
		case "goto":
		case "break":
		case "continue":
			return "dBranch";
		case "while":
		case "for":
		case "do":
		case "foreach":
		case "foreach_reverse":
			return "dRepeat";
		case "true":
		case "false":
			return "dBoolean";
		case "null":
		case "__FILE__":
		case "__LINE__":
		case "__EOF__":
		case "__VERSION__":
		case "__DATE__":
		case "__TIME__":
		case "__TIMESTAMP__":
		case "__VENDOR__":
			return "dConstant";
		case "alias":
		case "typedef":
			return "dTypedef";
		case "template":
		case "interface":
		case "class":
		case "struct":
		case "union":
			return "dStructure";
		case "enum":
			return "dEnum";
		case "new":
		case "delete":
		case "typeof":
		case "typeid":
		case "cast":
		case "align":
		case "this":
		case "super":
			return "dOperator";
		case "opNeg":
		case "opCom":
		case "opPostInc":
		case "opPostDec":
		case "opCast":
		case "opAdd":
			case "opAdd_r":
		case "opSub":
			case "opSub_r":
		case "opMul":
			case "opMul_r":
		case "opDiv":
			case "opDiv_r":
		case "opMod":
			case "opMod_r":
		case "opAnd":
			case "opAnd_r":
		case "opOr":
			case "opOr_r":
		case "opXor":
			case "opXor_r":
		case "opShl":
			case "opShl_r":
		case "opShr":
			case "opShr_r":
		case "opUShr":
			case "opUshr_r":
		case "opCat":
			case "opCat_r":
		case "opEquals":
		case "opCmp":
		case "opAssign":
		case "opAddAssign":
		case "opSubAssign":
		case "opMulAssign":
		case "opDivAssign":
		case "opModAssign":
		case "opAndAssign":
		case "opOrAssign":
		case "opXorAssign":
		case "opShlAssign":
		case "opShrAssign":
		case "opUShrAssign":
		case "opCatAssign":
		case "opIndex":
		case "opIndexAssign":
		case "opIndexOpAssign":
		case "opCall":
		case "opSlice":
		case "opSliceAssign":
		case "opSliceOpAssign":
		case "opPos":
		case "opIn":
			case "opIn_r":
		case "opPow":
		case "opDispatch":
		case "opStar":
		case "opDot":
		case "opApply":
		case "opApplyReverse":
		case "opDollar":
		case "opUnary":
		case "opIndexUnary":
		case "opSliceUnary":
		case "opBinary":
		case "opBinaryRight":
			return "dOpOverload";
		case "byte":
			case "ubyte":
		case "short":
			case "ushort":
		case "int":
			case "uint":
		case "long":
			case "ulong":
		case "cent":
			case "ucent":
		case "void":
		case "bool":
		case "bit":
		case "float":
		case "double":
		case "real":
		case "char":
		case "wchar":
		case "dchar":
		case "string":
		case "wstring":
		case "dstring":
		case "ireal":
		case "ifloat":
		case "idouble":
		case "creal":
		case "cfloat":
		case "cdouble":
		case "size_t":
		case "ptrdiff_t":
		case "sizediff_t":
		case "equals_t":
		case "hash_t":
		case "Object":
		case "Throwable":
		case "AssociativeArray":
		case "Error":
		case "Exception":
		case "Interface":
		case "OffsetTypeInfo":
		case "TypeInfo":
		case "TypeInfo_Typedef":
		case "TypeInfo_Enum":
		case "TypeInfo_Pointer":
		case "TypeInfo_Array":
		case "TypeInfo_StaticArray":
		case "TypeInfo_AssociativeArray":
		case "TypeInfo_Function":
		case "TypeInfo_Delegate":
		case "ClassInfo":
		case "TypeInfo_Interface":
		case "TypeInfo_Struct":
		case "TypeInfo_Tuple":
		case "TypeInfo_Const":
		case "TypeInfo_Invariant":
		case "TypeInfo_Shared":
		case "TypeInfo_Inout":
		case "MemberInfo":
		case "MemberInfo_field":
		case "MemberInfo_function":
		case "ModuleInfo":
			return "dType";
		case "deprecated":
		case "unittest":
		case "invariant":
			return "dDebug";
		case "throw":
		case "try":
		case "catch":
		case "finally":
			return "dExceptions";
		case "public":
		case "protected":
		case "private":
		case "package":
			return "dScopeDecl";
		case "debug":
		case "return":
		case "with":
		case "function":
		case "delegate":
		case "__ctfe":
		case "mixin":
		case "macro":
			return "dStatement";
		case "in":
		case "out":
		case "inout":
		case "ref":
		case "lazy":
		case "body":
		case "pure":
		case "nothrow":
		case "auto":
		case "static":
		case "override":
		case "final":
		case "abstract":
		case "volatile":
		case "__gshared":
		case "__thread":
		case "synchronized":
		case "shared":
		case "immutable":
		case "const":
			return "dStorageClass";
		case "pragma":
			return "dPragma";
		case "_arguments":
		case "_argptr":
		case "__vptr":
		case "__monitor":
		case "_ctor":
		case "_dtor":
			return "dIdentifier";
		case "contained":
		case "exit":
		case "success":
		case "failure":
			return "dScopeIdentifiers";
		case "isAbstractClass":
		case "isArithmetic":
		case "isAssociativeArray":
		case "isFinalClass":
		case "isFloating":
		case "isIntegral":
		case "isScalar":
		case "isStaticArray":
		case "isUnsigned":
		case "isVirtualFunction":
		case "isAbstractFunction":
		case "isFinalFunction":
		case "isStaticFunction":
		case "isRef":
		case "isOut":
		case "isLazy":
		case "hasMember":
		case "identifier":
		case "getMember":
		case "getOverloads":
		case "getVirtualFunctions":
		case "parent":
		case "compiles":
		case "classInstanceSize":
		case "allMembers":
		case "derivedMembers":
		case "isSame":
			return "dTraitsIdentifier";
		case "Windows":
		case "Pascal":
		case "Java":
		case "System":
		case "D":
			return "dExternIdentifier";
		case "@safe":
		case "@trusted":
		case "@system":
		case "@property":
		case "@disable":
			return "dAttribute";
		case "DigitalMars":
		case "GNU":
		case "LDC":
		case "SDC":
		case "D_NET":
		case "X86":
		case "X86_64":
		case "ARM":
		case "PPC":
		case "PPC64":
		case "IA64":
		case "MIPS":
		case "MIPS64":
		case "Alpha":
		case "SPARC":
		case "SPARC64":
		case "S390":
		case "S390X":
		case "HPPA":
		case "HPPA64":
		case "SH":
		case "SH64":
		case "linux":
		case "Posix":
		case "OSX":
		case "FreeBSD":
		case "Windws":
		case "Win32":
		case "Win64":
		case "OpenBSD":
		case "BSD":
		case "Solaris":
		case "AIX":
		case "SkyOS":
		case "SysV3":
		case "SysV4":
		case "Hurd":
		case "Cygwin":
		case "MinGW":
		case "LittleEndian":
		case "BigEndian":
		case "D_InlineAsm_X86":
		case "D_InlineAsm_X86_64":
		case "D_Version2":
		case "D_Coverage":
		case "D_Ddoc":
		case "D_LP64":
		case "D_PIC":
		case "none":
		case "all":
			return "dVersionIdentifier";
		case "\"":
		case "'":
			return "dString";
		default:
			return "";
	}
}

